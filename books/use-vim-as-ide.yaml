# yangyangwithgnu/use_vim_as_ide配置
---
# 技术教程名称应总是唯一的
name:像IDE一样实验Vim      
# 技术教程 URL 链接定位字符串，通过 "-" 符号链接单词
slug: use-vim-as-ide
topic: Linux运维
# 标签是一个有序列表，技术教程在页面显示时会使用第一个标签的 icon
tags:
  - Linux
# 技术教程所在的 git 仓库地址，仓库地址由 github 用户名和仓库名组成
repository: yangyangwithgnu/use_vim_as_ide
# 技术教程所在的 git 仓库地址目录
# shiyanlou/library 下的技术教程需要指定教程章节内容所在的目录名称
# 而如果作者的技术教程拥有自己的仓库，则填写 "/" 即可
repository_dir: /
# 作者信息
# 如果同一作者拥有多个技术教程，所有教程的作者配置信息应一致
author:
  name: yangyangwithgnu
  email: yangyangwithgnu@yeah.net 
  # github 主页地址
  github: github.com/yangyangwithgnu
  blog: yangyangwithgnu.github.io
# 描述信息
description: |
  开始前，我假设你：0）具备基本的 vim 操作能力，清楚如何打开/编辑/保存文档、命令与插入模式间切换；1）希望将 vim 打造成 C/C++ 语言的 IDE，而非其他语言。|

  关于 vim 的优点，你在网上能查到 128+ 项，对我而言，只有两项：0）所思即所得，让手输入的速度跟上大脑思考的速度，1）所需即所获，只有你想不到的功能、没有实现不了的插件。希望获得前者的能力，你需要两本教程深入学习，《Practical Vim: Edit Text at the Speed of Thought》和《vim user manual》；要想拥有后者的能力，通读本文 -。-#。对于 vim 的喜爱，献上湿哥哥以表景仰之情：|

  vi 之大道如我心之禅，|
  vi 之漫路即为禅修，|
  vi 之命令禅印于心，|
  未得此道者视之怪诞，|
  与之为伴者洞其真谛，|
  长修此道者巨变人生。|

  言归正传，说说 vim 用于代码编写提供了哪些直接和间接功能支撑。vim 用户手册中，50％ 的例子都是在讲 vim 如何高效编写代码，由此可见，vim 是一款面向于程序员的编辑器，即使某些功能 vim 无法直接完成，借助其丰富的插件资源，必定可以达成目标，这就是所需即所获。|

  我是个目标驱动的信奉者，本文内容，我会先给出优秀 C/C++ IDE 应具备哪些功能，再去探索如何通过 vim 的操作或插件来达到目标。|
# 配置教程是否该领域官方教程
official: false
# 教程版本号
version: 1.0
