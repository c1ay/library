# likebeta/twisted-intro-cn配置
---
# 技术教程名称应总是唯一的
name: twisted与异步编程入门  
# 技术教程 URL 链接定位字符串，通过 "-" 符号链接单词
slug: twisted-intro-cn
topic: 后端开发
# 标签是一个有序列表，技术教程在页面显示时会使用第一个标签的 icon
tags:
  - Python
# 技术教程所在的 git 仓库地址，仓库地址由 github 用户名和仓库名组成
repository: likebeta/twisted-intro-cn
# 技术教程所在的 git 仓库地址目录
# shiyanlou/library 下的技术教程需要指定教程章节内容所在的目录名称
# 而如果作者的技术教程拥有自己的仓库，则填写 "/" 即可
repository_dir: /zh/
# 作者信息
# 如果同一作者拥有多个技术教程，所有教程的作者配置信息应一致
author:
  name: likebeta  
  email: ixxoo.me@gmail.com
  # github 主页地址
  github: github.com/likebeta
  blog:
# 描述信息
description: |
  最近有人在Twisted邮件列表中提出诸如"为任务紧急的人提供一份Twisted介绍"的需求。值得提前透露的是，这个系列并不会如他们所愿。尤其是介绍Twisted框架和基于Python 的异步编程而言，可能短时间无法讲清楚。因此,如果你时间紧急，这恐怕不是你想找的资料。
  我相信如果对异步编程模型一无所知，快速的介绍同样无法让你对其有所理解，至少你得稍微懂点基础知识吧。我已经用Twisted框架几年了，因此思考过我当初是怎么学习它(学得很慢)并发现学习它的最大难度并不在Twisted本身,而在于对其模型的理解，只有理解了这个模型，你才能更好去写和理解异步程序的代码。大部分Twisted的代码写得很清晰，其在线文档也非常棒（至少在开源软件这个层次上可以这么说）。但如果不理解这个模型，不管是读Twisted源码还是使用Twisted的代码更或者是相关文档，你都会感到非常的伤脑筋。
  因此，我会用前面几个部分来介绍这个模型以让你掌握它的机制，稍后会介绍一下Twisted的特点。实际上，一开始，我们并不会使用Twisted，相反，会使用简单的Python代码来说明一个异步模型是如何工作的。我们在初次学习Twisted的时，会从你平常都不会直接使用的底层的实现讲起。Twisted是一个高度抽象的体系，因此在使用它时，你会体会到其多层次性。但当你去学习尤其是尝试着理解它是如何工作时，这种为抽像而带来的多层次性会给你带来极大的理解难度。所以，我们准备来个从内到外，从低层开始学习它。
# 配置教程是否该领域官方教程
official: false
# 教程版本号
version: 1.3
